// –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —á—Ç–æ–±—ã –≤–∑—è—Ç—å –Ω—É–∂—ã–Ω–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏

const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

(async () => {
    const browser = await puppeteer.launch({
        executablePath: '/usr/bin/google-chrome',
        headless: false,
        protocolTimeout: 40000000
    });
    const page = await browser.newPage();

    // –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç—É—á–∞—Ç—å—Å—è –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
    const retry = async (fn, retries = 3) => {
        for (let i = 0; i < retries; i++) {
            try {
                return await fn();
            } catch (error) {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞: ${error.message}. –ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –∏–∑ ${retries}...`);
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
        }
        throw new Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫!");
    };

    // üîπ –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    await page.setRequestInterception(true);
    page.on('request', (request) => {
        const blockTypes = ['image', 'font', 'media', 'stylesheet'];
        if (blockTypes.includes(request.resourceType())) {
            request.abort();
        } else {
            request.continue();
        }
    });

    const baseUrl = 'https://bones.fandom.com/ru/wiki/%D0%9A%D0%BE%D1%81%D1%82%D0%B8_%D0%92%D0%B8%D0%BA%D0%B8';

    const repeat =[
            "–¢–µ–º–ø–µ—Ä–∞–Ω—Å –ë—Ä–µ–Ω–Ω–∞–Ω",
            "–î–∂–µ–∫ –•–æ–¥–∂–∏–Ω—Å",
            "–≠–Ω–¥–∂–µ–ª–∞ –ú–æ–Ω—Ç–µ–Ω–µ–≥—Ä–æ",
            "–ö—ç–º–∏–ª–∞ –°–µ—Ä–æ—è–Ω",
            "–ó–∞–∫–∞—Ä–∏ –£—Ä–∏—è –≠–¥–¥–∏",
            "–°–∏–ª–∏ –ë—É—Ç",
            "–õ—ç–Ω—Å –°–≤–∏—Ç—Å",
            "–¢–∏–º –°–∞–ª–ª–∏–≤–∞–Ω",
            "–ü—ç–π—Ç–æ–Ω –ü–µ—Ä–æ—Ç—Ç–∞",
            "–î–∂–µ–Ω–Ω–∏ –®–æ—É",
            "–°—ç–º –ö–∞–ª–ª–µ–Ω",
            "–ö–ª–∞—Ä–∫ –≠–¥–∏—Å–æ–Ω",
            "–í–∏–Ω—Å–µ–Ω—Ç –ú—é—Ä—Ä–µ–π",
            "–í—ç–Ω–¥–∞–ª –ë—Ä—ç–π",
            "–§–∏–Ω–Ω –ê–±–µ—Ä–Ω–µ—Ç–∏",
            "–î–µ–π–∑–∏ –í–∏–∫",
            "–ö–æ–ª–∏–Ω –§–∏—à–µ—Ä",
            "–ê—Ä–∞—Å—Ç—É –í–∞–∑–∏—Ä–∏",
            "–ú–∞–∫—Å –ö–∏–Ω–∞–Ω",
            "–ì–æ–≤–∞—Ä–¥ –≠–ø—Å",
            "–ì–æ—Ä–º–æ–≥–æ–Ω",
            "–ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä –ü–µ–ª–ª–∞–Ω—Ç"
        ];

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    const optimizePage = async () => {
        await page.evaluate(() => {
            // –£–¥–∞–ª—è–µ–º —Ä–µ–∫–ª–∞–º—É –∏ –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            const elementsToRemove = [
                'div[id^="ad-"]',  // –ë–ª–æ–∫–∏ —Å —Ä–µ–∫–ª–∞–º–æ–π
                '.ads', 
                '.advertisement',
                '.sidebar',  // –ë–æ–∫–æ–≤—ã–µ –ø–∞–Ω–µ–ª–∏
                '.rail', 
                'footer',  // –§—É—Ç–µ—Ä
                'video',   // –í–∏–¥–µ–æ
                'iframe'   // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ (YouTube –∏ —Ç.–¥.)
            ];
            elementsToRemove.forEach(selector => {
                document.querySelectorAll(selector).forEach(el => el.remove());
            });

            // –û—Ç–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã
            const style = document.createElement('style');
            style.innerHTML = '* { animation: none !important; transition: none !important; }';
            document.head.appendChild(style);
        });
        console.log("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!");
    };

    // –î–æ—Ö–æ–¥–∏–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ 
    const clickAnother = async () => {
        await retry(async () => {
            const selectors = [
                'li[data-hash="–ü–µ—Ä—Å–æ–Ω–∞–∂–∏"] a',
                'li[data-hash="–ü—Ä–æ—á–∏–µ"] a',
                'a[title="–ö–∞—Ç–µ–≥–æ—Ä–∏—è:–ü–µ—Ä—Å–æ–Ω–∞–∂–∏"]'
            ];
            
            for (const selector of selectors) {
                await page.waitForSelector(selector, { visible: true });
                await page.click(selector);
            }
        }, 3);
    };

    // –†–∞–±–æ—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –≤ json —Ñ–∞–π–ª
    const scrapeData = async () => {
        await retry(async () => {
            await page.waitForSelector('#firstHeading', { timeout: 10000 });

            const data = await page.evaluate((repeatArray) => {
                const heading = document.querySelector("#firstHeading");
                const title = heading ? heading.innerText.trim() : null;
    
                const textElements = document.querySelectorAll('.category-page__members a');
                let textContent = Array.from(textElements)
                    .map(el => el.innerText.trim())
                    .filter(text => text.length > 0 && !repeatArray.includes(text)); // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ç–µ–∫—Å—Ç—ã
    
                return { title, text: textContent };
            }, repeat); // üëà –ü–µ—Ä–µ–¥–∞–µ–º `repeat` –≤–Ω—É—Ç—Ä—å `evaluate()`
    
            if (!data.title || repeat.includes(data.title) || data.text.length === 0) {
                console.log(`‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ '${data.title}' –∏–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ, –ø—Ä–æ–ø—É—Å–∫...`);
                return;
            }


            const now = new Date();
            const formattedDate = now.toISOString().replace(/:/g, '-');
            const dirPath = path.join(__dirname, 'Others');

            if (!fs.existsSync(dirPath)) fs.mkdirSync(dirPath, { recursive: true });

            const filePath = path.join(dirPath, `data_${formattedDate}.json`);
            fs.writeFileSync(filePath, JSON.stringify({ title: data, date: formattedDate }, null, 2), 'utf-8');

            console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${filePath}`);
        }, 3);
    };

    await page.goto(baseUrl, { waitUntil: 'domcontentloaded', timeout: 60000 });
    await optimizePage(); // ‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await clickAnother();
    await scrapeData();

    try {
        await browser.close();
        console.log("üõë –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç");
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞:", error);
    }
})();
